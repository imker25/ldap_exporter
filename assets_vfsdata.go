// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 10, 27, 22, 10, 52, 904882223, time.UTC),
		},
		"/definitions": &vfsgen۰DirInfo{
			name:    "definitions",
			modTime: time.Date(2020, 10, 27, 22, 11, 45, 793322923, time.UTC),
		},
		"/definitions/389.yaml": &vfsgen۰CompressedFileInfo{
			name:             "389.yaml",
			modTime:          time.Date(2020, 10, 28, 18, 54, 39, 235109229, time.UTC),
			uncompressedSize: 4917,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x96\x41\x4f\xdb\x4e\x10\xc5\xef\xf9\x14\x23\xfe\x07\xfe\xad\x28\xb9\x5b\xe2\x90\x06\x0e\x48\xa5\xa0\x42\xc5\x79\xe2\x1d\xc7\x5b\xec\x59\x6b\x3d\xc6\x4d\x3f\x7d\xb5\xb6\xd7\x49\xc3\x26\x70\xc0\x62\x8f\xce\x3c\x8d\xde\xfb\xed\x66\x67\xfe\x83\xa5\xe1\x4c\xaf\x1b\x8b\xa2\x0d\x43\xa6\x0b\x82\xcc\x58\x68\x8d\x7d\xd2\xbc\x86\x56\x4b\x0e\x92\x13\x28\xca\xb0\x29\x04\x6e\x2b\xe2\x6f\x97\x8b\x3b\xb8\x31\xac\xc5\x58\x27\x52\x28\xb8\xc2\x9a\x00\x6b\xa8\x73\xd3\x32\x68\x86\x5c\xa4\xaa\x93\xf9\xbc\x6d\xdb\x73\x53\x11\x17\x0a\xab\x73\x63\xd7\x73\x45\xcf\x54\xcc\x51\x95\x9a\xe7\xe5\xd8\xa4\x2e\xb0\x52\xe7\xb9\x94\xc5\xec\x0b\x30\x96\x94\xc0\x57\xcd\xea\xb6\xa2\xde\x5a\xbd\x34\x0d\xcb\x0c\xa0\x26\xb4\x69\x9e\xc0\x69\xca\x17\x4e\x71\x96\xf2\xc5\x56\xe5\xbe\x06\x67\xa7\x33\x70\x79\x84\x6c\x02\xa7\xff\x9b\xd5\x2f\x4a\x65\x59\x60\x5d\x5f\x7c\xfe\xe4\x6a\x28\x62\xf5\xaa\x11\xaa\x93\x19\x00\x40\x49\x62\x75\x3a\x7c\x00\x0c\xd6\x6e\xab\x6b\xd6\xa2\x51\x48\xf9\x0a\x80\x6c\x2a\x4a\x20\x75\x8e\xc8\x8e\xbf\xe6\x54\x54\x09\x9c\x8c\x7a\x58\x69\x56\x60\x46\x6f\x27\xfb\x9d\x97\xa6\xac\x0a\x7a\x7b\xe7\x51\xff\xb2\xb3\x67\xf6\x93\x57\xaf\x52\xeb\x35\x11\x73\x6b\x78\x3a\x72\x81\xde\x9e\xdd\x7d\xc7\xe8\x38\xbb\x5e\x13\x31\xbb\xde\xec\x34\xec\x02\xbd\x3d\xbb\x85\x7a\xe5\xd2\x2d\x54\xcc\x37\x0e\xd5\x44\xd7\x6d\xbf\xb1\xe7\x75\x63\x94\xce\x36\xc7\x91\xf5\x9a\x88\xa9\x95\x9d\xc1\x69\xc0\x05\x7a\x7b\x76\x4e\x84\x96\x8e\xc3\x1b\x44\x11\xd3\x4b\x7b\x87\xd3\xe0\x0b\x35\xf7\xfc\x2e\xc9\x69\x8e\xe3\xeb\x35\x11\xd3\x53\x9d\xc1\x69\xe0\x05\x7a\x7b\x76\x57\xbf\x85\x58\xd1\x2b\x8f\x9d\x57\x45\xcc\x8f\x06\x8b\xd3\x10\x0c\x76\x1f\xf7\xba\x8d\xd0\xbd\xa0\xe8\x5a\x74\x1a\x5c\xeb\x36\x42\x1d\xad\x51\xf5\xfe\xec\x96\x7d\x84\x37\x26\xbb\xf4\x1b\x6e\xad\xff\x90\xdb\x6e\x3b\x8b\xdb\x48\x6e\x2b\x7e\xc8\x2d\xa1\xaa\xf7\xb2\xb8\x8a\x33\x3f\x54\xdf\x3d\x07\xa9\x6b\xce\xcc\x7e\x8c\x35\x36\x6b\xda\x0f\xe1\xac\xc0\xe0\x63\x67\xeb\x11\xb4\xa2\x79\x1d\xb6\xef\xab\x91\x44\xf0\x76\x5e\xc6\x58\xa4\xa2\x9f\x29\x1c\xa2\xaf\x45\x12\xa1\x37\x33\x06\xf0\xd5\x31\xc8\x1d\xb1\x3a\x78\x1c\x43\x31\x92\x28\x83\x9b\x9d\x2c\xdb\xff\x38\xa6\x4f\x85\x41\x15\x8e\xe1\xab\x91\xe4\xf0\x76\xb6\x41\xc6\x1c\x3f\x08\xd5\x23\x6a\x21\x1b\x7c\xe8\x5d\xd9\x39\x1f\x24\x1f\xfc\x4a\x39\x37\xd0\xf6\x56\x7a\xcd\x4e\x92\x47\xab\x85\x8e\x44\xe9\xea\xf1\x64\xe9\xec\x1c\x0c\x73\xc5\x62\x37\xdb\xe9\x10\x9c\xc1\x2c\x56\x47\x36\x46\xbe\x37\xe5\x8a\x2c\x98\x0c\xc6\x81\x32\xd8\xdc\xc9\xb6\x34\xcc\x94\x1e\xdc\x2d\x1e\x8c\x60\x71\xd6\x6d\xb8\xa3\x2e\x96\xe9\x98\x6e\x2d\x0d\x47\xf6\xcf\x84\xdc\x71\xbc\xbf\xad\x37\xd6\x12\xcb\x07\xc5\x3a\x3c\x2d\x55\x20\xd9\xc9\xdf\x00\x00\x00\xff\xff\x85\xb4\xdd\x69\x35\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions"].(os.FileInfo),
	}
	fs["/definitions"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions/389.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
