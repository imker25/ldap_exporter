// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 10, 27, 22, 10, 52, 904882223, time.UTC),
		},
		"/definitions": &vfsgen۰DirInfo{
			name:    "definitions",
			modTime: time.Date(2020, 10, 27, 22, 11, 45, 793322923, time.UTC),
		},
		"/definitions/389.yaml": &vfsgen۰CompressedFileInfo{
			name:             "389.yaml",
			modTime:          time.Date(2020, 10, 28, 19, 54, 37, 829346255, time.UTC),
			uncompressedSize: 4925,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x98\xc1\x4f\xe3\x3a\x10\xc6\xef\xfd\x2b\x46\xbc\x03\xef\x3d\xb1\xf4\x5e\x89\x43\xb7\xe5\x80\xb4\x2c\x68\x61\xc5\x79\x6a\x4f\x1a\x2f\xc9\x38\xb2\x27\x74\xfb\xdf\xaf\x9c\xc4\x69\xb7\xa4\x85\x03\x11\x3e\xa6\xf3\x69\xf4\xfd\xbe\xb8\x9e\x51\xfe\x81\x85\xe5\xcc\xac\x6b\x87\x62\x2c\x43\x66\x0a\x82\xcc\x3a\xd8\x58\xf7\x6c\x78\x0d\x1b\x23\x39\x48\x4e\xa0\x29\xc3\xba\x10\xb8\xab\x88\xbf\x2d\xe7\xf7\x70\x6b\xd9\x88\x75\x41\xa4\x51\x70\x85\x9e\x00\x3d\xf8\xdc\x6e\x18\x0c\x43\x2e\x52\xf9\xd9\x74\xba\xd9\x6c\x2e\x6d\x45\x5c\x68\xac\x2e\xad\x5b\x4f\x35\xbd\x50\x31\x45\x5d\x1a\x9e\x96\x7d\x13\x5f\x60\xa5\x2f\x73\x29\x8b\xc9\x17\x60\x2c\x69\x06\x5f\x0d\xeb\xbb\x8a\x5a\x6b\x7e\x61\x6b\x96\x09\x80\x27\x74\x2a\x9f\xc1\xb9\xe2\xab\xa0\xb8\x50\x7c\xb5\x53\x85\xa7\xce\xd9\xf9\x04\x02\x8f\x90\x9b\xc1\xf9\xbf\x76\xf5\x8b\x94\x2c\x0a\xf4\xfe\xea\xff\xff\x42\x0d\x45\x9c\x59\xd5\x42\x7e\x36\x01\x00\x28\x49\x9c\x51\xdd\x03\x40\x67\xed\xae\xba\x61\x23\x06\x85\x74\xac\x00\xc8\xb6\xa2\x19\xa8\xe0\x88\x5c\xff\x6b\x4e\x45\x35\x83\xb3\x5e\x0f\x2b\xc3\x1a\x6c\xef\xed\xec\xb0\xf3\xc2\x96\x55\x41\xef\xef\xdc\xeb\x5f\x77\x8e\x99\xfd\xe4\xd5\x9b\xa9\xb5\x9a\x84\x73\xab\x79\xbc\xe4\x06\x7a\xc7\xec\x1e\x9a\x8c\x4e\x67\xd7\x6a\x12\xce\xae\x35\x3b\x4e\x76\x03\xbd\x63\x76\x73\xfd\xc6\xa1\x9b\xeb\x94\x4f\x1c\xea\x91\x8e\xdb\x61\xe3\x98\xd7\xad\xd5\x26\xdb\x9e\x8e\xac\xd5\x24\x9c\x5a\xd9\x18\x1c\x27\xb8\x81\xde\x31\xbb\x20\x42\x47\xa7\xc3\xeb\x44\x09\xa7\xa7\x5a\x87\xe3\xc4\x37\xd4\x3c\xe6\xb7\xa4\xa0\x39\x1d\x5f\xab\x49\x38\x3d\xdd\x18\x1c\x27\xbc\x81\xde\x31\xbb\xeb\xdf\x42\xac\xe9\x8d\xcb\x2e\xaa\x12\xce\x8f\x3a\x8b\xe3\x24\x38\xd8\xbd\xdf\xeb\xb6\x42\x0f\x82\x62\xbc\x18\x35\xb8\xd6\x6d\x85\x9a\xb4\x7a\xd5\xc7\x67\xb7\x68\x11\xde\x49\xb6\x44\x41\x10\x87\xec\x33\x72\x8e\x74\x58\x70\x1b\x97\x3b\xaa\xb0\x18\x3f\xe6\x8e\x50\xfb\x03\x9c\x50\x09\xfe\xbb\xea\x87\xa3\x90\xbe\xe1\xcc\x1e\x92\xac\xb1\x5e\xd3\x21\x47\xb0\x02\x9d\x8f\xbd\xc5\x47\xd0\x89\xe1\xf5\xb0\xfd\x58\x4d\x04\x21\xda\x79\x8d\x31\x57\x62\x5e\x68\x18\xa2\xad\x25\x82\xd0\x9a\xe9\x01\x62\xb5\x07\xb9\x27\xd6\x47\x5f\x47\x57\x4c\x04\xa5\x73\xb3\xc7\xb2\xfb\x9b\xa3\x7a\x2e\x2c\xea\x61\x8c\x58\x4d\x84\x23\xda\xd9\x81\xf4\x1c\x3f\x08\xf5\x13\x1a\x21\x37\x78\xd7\x87\x72\x70\xde\x49\x3e\xf9\xa2\x0a\x6e\x60\xd3\x5a\x69\x35\x7b\x24\x4f\xce\x08\x9d\x40\x69\xea\xe9\xb0\x34\x76\x8e\xc2\x5c\xb3\xb8\xed\x6e\x40\x0c\x8e\x61\x16\x67\x12\x9b\x24\xdf\xeb\x72\x45\x0e\x6c\x06\xcb\xf8\xd5\xa4\x21\x81\xb9\x52\xe4\xf7\xcf\xdd\xc2\x32\x93\x3a\xba\x63\x3c\x5a\xc1\xe2\xa2\xd9\x74\x7b\x5d\x02\x53\xb2\x21\x52\x3b\x4b\xdd\x7b\xfb\x6b\x4c\xee\x39\x3e\xdc\xda\x6b\xe7\x88\xe5\x93\xb0\x8e\x8f\x4c\x3d\x40\x76\xf6\x27\x00\x00\xff\xff\x16\xfc\xb0\xa3\x3d\x13\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions"].(os.FileInfo),
	}
	fs["/definitions"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/definitions/389.yaml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
